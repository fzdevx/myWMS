plugins {
  id "org.hibernate.gradle.tools" version "1.2.4"
}

apply plugin: 'ear'

version = '1.8.0'
def DB_GROUP = 'DataBase Utililities'

configurations {
    hibtools
}

dependencies {
  deploy project('mywms.as')
  deploy project('los.common-ejb')
  deploy project('los.location-ejb')
  deploy project('los.inventory-ejb')
  deploy project('los.stocktaking-ejb')
  deploy project('los.mobile')
  deploy project(path: 'los.mobile', configuration: 'archives')
  deploy project(path: 'project-ejb', configuration: 'archives')

  earlib group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.4.1'
//  earlib 'net.sf.jasperreports:jasperreports:4.6.0'
//  earlib group: 'net.sf.jasperreports', name: 'jasperreports-fonts', version: '4.0.0'
  earlib group: 'net.sourceforge.barbecue', name: 'barbecue', version: '1.5-beta1'
  earlib 'org.apache.commons:commons-lang3:3.4'

  hibtools 'org.hibernate:hibernate-tools:4.+'
  hibtools project('mywms.as')
  hibtools project('los.common-ejb')
  hibtools project('los.location-ejb')
  hibtools project('los.inventory-ejb')
  hibtools project('los.stocktaking-ejb')
  hibtools project('los.mobile')
  hibtools group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'
  hibtools group: 'org.postgresql', name: 'postgresql', version: '9.4.1208'
}

task createSQLScript(dependsOn: ['build']) {
  group = DB_GROUP
  dependsOn 'mywms.as:classes'
  dependsOn 'los.common-ejb:classes'
  dependsOn 'los.location-ejb:classes'
  dependsOn 'los.inventory-ejb:classes'
  dependsOn 'los.stocktaking-ejb:classes'
  description = "Creates a DDL script for creating the database"
  outputs.files('build/db_create.sql')
  doLast {
//    BasicConfigurator.configure();
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibtools.asPath)
        ant.hibernatetool(destdir: buildDir) {
        ant.annotationconfiguration(configurationfile: file('database/hibernate.cfg.xml'), propertyfile: file('database/conection.properties'))
        ant.hbm2ddl(drop: 'false', export: 'false', create: 'true', outputfilename: 'db_create.sql')
    }
  }
  doLast {
    def input = file("$buildDir/db_create.sql")
    input.text = '\\set ON_ERROR_STOP 0\n' + input.text
  }
}

task updateSchemaScript(dependsOn: ['build']) {
  group = DB_GROUP
  doLast {
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibtools.asPath)
    ant.hibernatetool(destdir: file('build')) {
        ant.annotationconfiguration(configurationfile: file('database/hibernate.cfg.xml'), propertyfile: file('database/conection.properties'))
        ant.hbm2ddl(export: 'false', create: 'false', update:'true', drop:'false', outputfilename: 'db_update.sql')
    }
  }
}

task dropSchema(dependsOn: ['build']) {
  group = DB_GROUP
  doLast {
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibtools.asPath)
    ant.hibernatetool(destdir: file('build')) {
        ant.annotationconfiguration(configurationfile: file('database/hibernate.cfg.xml'), propertyfile: file('database/conection.properties'))
        ant.hbm2ddl(export: 'true', create: 'false', update:'false', drop:'true')
    }
  }
}

task createSchema(dependsOn: ['build']) {
  group = DB_GROUP
  doLast {
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibtools.asPath)
    ant.hibernatetool(destdir: file('build')) {
        ant.annotationconfiguration(configurationfile: file('database/hibernate.cfg.xml'), propertyfile: file('database/conection.properties'))
        ant.hbm2ddl(create: 'true', export: 'true')
    }
  }
}

task updateSchema(dependsOn: ['build']) {
  group = DB_GROUP
  doLast {
    ant.taskdef(name: 'hibernatetool',
            classname: 'org.hibernate.tool.ant.HibernateToolTask',
            classpath: configurations.hibtools.asPath)
    ant.hibernatetool(destdir: file('build')) {
        ant.annotationconfiguration(configurationfile: file('database/hibernate.cfg.xml'), propertyfile: file('database/conection.properties'))
        ant.hbm2ddl(export: 'true', create: 'false', update:'true', drop:'false')
    }
  }
}

ear {
  archiveName 'los.reference.ear'
  from ('./') {
    include 'META-INF/jboss-deployment-structure.xml'
  }

  deploymentDescriptor {  // custom entries for application.xml:
    displayName = "myWMS"
    description = 'myWMS Warehouse Management System'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'

  dependencies {
    compile group: 'org.wildfly', name: 'wildfly-server', version: '8.2.1.Final'
    compile group: 'javax', name: 'javaee-api', version: '7.0'

    compile 'org.jboss.ws:jbossws-api:1.0.2.Final'
    compile 'org.jboss.ejb3:jboss-ejb3-ext-api:2.2.0.Final'
    compile 'org.hibernate:hibernate-core:4.3.7.Final'
    compile 'log4j:log4j:1.2.17'
    compile group: 'org.jboss', name: 'jboss-ejb-client', version: '2.1.6.Final'

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.14'

      // We use the latest groovy 2.x version for Spock testing
    compile 'org.codehaus.groovy:groovy-all:2.4.9'

    // Use the awesome Spock testing and specification framework even with Java
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'junit:junit:4.12'
  }

  //check.dependsOn.remove(test)
}

allprojects {
  apply plugin: 'eclipse'
  //sourceCompatibility = 1.8

  repositories {
    jcenter()
    mavenCentral()

    maven {
      name "Jasper Reports"
      url "http://jasperreports.sourceforge.net/maven2/"
    }

    maven {
      name "Jasper Reports third party artifacts"
      url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
    }

    maven {
      name "Gradle Repository"
      url "https://plugins.gradle.org/m2/"
    }

    maven {
      name "JBoss Public Maven Repository Group"
      url "https://repository.jboss.org/nexus/content/groups/public-jboss/"
    }

    maven {
      name "PrimeFaces Repository"
      url "http://repository.primefaces.org"
    }
  }

  eclipse {
    classpath {
      file.whenMerged {
        entries.removeAll { it.path.endsWith('server.app/los.common-ejb/build/classes/groovy/test') }
        entries.removeAll { it.path.endsWith('server.app/los.mobile/build/classes/groovy/server') }
      }
    }
  }
}
