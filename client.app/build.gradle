
def webstartDir = file(buildDir.path + '/webstart')

repositories {
  jcenter()
  mavenCentral()

  maven {
    name "Jasper Reports"
    url "http://jasperreports.sourceforge.net/maven2/"
  }

  maven {
    name "Jasper Reports third party artifacts"
    url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/"
  }
}


apply plugin: 'java'
apply plugin: 'eclipse'

version = '0.0.1'

sourceSets {
  main {
    resources.srcDir 'src/main/java'
  }
}

dependencies {
  compile group: 'org.wildfly', name: 'wildfly-ejb-client-bom', version: '8.2.1.Final'
  compile 'log4j:log4j:1.2.17'
  compile group: 'javax', name: 'javaee-api', version: '7.0'
  compile fileTree(dir: 'lib', include: '*.jar')

  compile project(path: ':server.app:mywms.as')
  compile project(path: ':server.app:los.common-ejb')
  compile project(path: ':server.app:los.location-ejb')
  compile project(path: ':server.app:los.inventory-ejb')
//  compile project(path: ':server.app:los.stocktaking-ejb').artifacts
}

task collect(type: Copy) {
	description "Copies all the project jar files in the build/libs ready for packaging"

	destinationDir buildDir

	def deps = configurations.compile.filter { f -> f.name.endsWith(".jar") }
	into(libsDirName) {
		from deps
	}
  rename { f -> f + '.raw'}
  eachFile { f ->
    ant.jar(update: "true", destfile: new File(buildDir, f.getPath().substring(0, f.getPath().length()-4))) {
        zipfileset(src: f.file) {
          exclude(name: 'META-INF/INDEX.LIST')
          exclude(name: 'META-INF/*.SF')
          exclude(name: 'META-INF/*.DSA')
          exclude(name: 'META-INF/*.RSA')
          exclude(name: 'META-INF/MANIFEST.MF')
        }
    }
  }

  doLast {
    delete fileTree(dir: buildDir , include: '**/*.raw')
  }
}

jar {
  dependsOn collect
	baseName = 'MyWMS-client'
  manifest {
		attributes("Permissions": "all-permissions", "Codebase": "*")
	}
}

task signAll {
	dependsOn jar
	inputs.dir libsDir
	outputs.dir webstartDir
	doLast {
		webstartDir.mkdirs()
		def output = new ByteArrayOutputStream()
		exec {
			commandLine 'javapackager', '-signjar', '-keystore', keyStoreFile, '-storepass', keyStorePassword, '-alias', keyAlias
			args '-srcdir', libsDir
			args '-outdir', webstartDir
			standardOutput = output
		}
	}
}

task generateJnlp(dependsOn: [signAll]) << {
  File jnlpTemplateFile = new File('template.jnlp')
  def root = new XmlParser().parse(jnlpTemplateFile)
  def jnlpFileName = jar.baseName + "-${version}.jnlp"
  // Setting resources
  def resource = root.resources[0]
  def j2se = resource.j2se[0]
  j2se.@version = "1.8+"
  def collection = files { webstartDir.listFiles() }
  def mainJar = jar.archiveName
  collection.sort().each {
      def resourceValues = [href: it.name]
      if (mainJar == it.name) {
          resourceValues = [href: it.name, main: 'true']
      }
      resource.appendNode('jar', resourceValues)
  }
  File jnlpFile = new File(webstartDir, jnlpFileName)
  new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
}

task webstart {
  dependsOn generateJnlp
}
